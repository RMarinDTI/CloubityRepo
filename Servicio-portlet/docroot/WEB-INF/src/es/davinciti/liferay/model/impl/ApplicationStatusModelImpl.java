/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package es.davinciti.liferay.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import es.davinciti.liferay.model.ApplicationStatus;
import es.davinciti.liferay.model.ApplicationStatusModel;
import es.davinciti.liferay.model.ApplicationStatusSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ApplicationStatus service. Represents a row in the &quot;CMES_ApplicationStatus&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link es.davinciti.liferay.model.ApplicationStatusModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ApplicationStatusImpl}.
 * </p>
 *
 * @author Cmes
 * @see ApplicationStatusImpl
 * @see es.davinciti.liferay.model.ApplicationStatus
 * @see es.davinciti.liferay.model.ApplicationStatusModel
 * @generated
 */
@JSON(strict = true)
public class ApplicationStatusModelImpl extends BaseModelImpl<ApplicationStatus>
	implements ApplicationStatusModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a application status model instance should use the {@link es.davinciti.liferay.model.ApplicationStatus} interface instead.
	 */
	public static final String TABLE_NAME = "CMES_ApplicationStatus";
	public static final Object[][] TABLE_COLUMNS = {
			{ "applicationStatusId", Types.BIGINT },
			{ "applicationName", Types.VARCHAR },
			{ "statusId", Types.VARCHAR },
			{ "name", Types.VARCHAR },
			{ "description", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table CMES_ApplicationStatus (applicationStatusId LONG not null primary key,applicationName VARCHAR(75) null,statusId VARCHAR(75) null,name VARCHAR(75) null,description VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table CMES_ApplicationStatus";
	public static final String ORDER_BY_JPQL = " ORDER BY applicationStatus.applicationStatusId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CMES_ApplicationStatus.applicationStatusId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.es.davinciti.liferay.model.ApplicationStatus"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.es.davinciti.liferay.model.ApplicationStatus"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.es.davinciti.liferay.model.ApplicationStatus"),
			true);
	public static long APPLICATIONNAME_COLUMN_BITMASK = 1L;
	public static long STATUSID_COLUMN_BITMASK = 2L;
	public static long APPLICATIONSTATUSID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ApplicationStatus toModel(ApplicationStatusSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ApplicationStatus model = new ApplicationStatusImpl();

		model.setApplicationStatusId(soapModel.getApplicationStatusId());
		model.setApplicationName(soapModel.getApplicationName());
		model.setStatusId(soapModel.getStatusId());
		model.setName(soapModel.getName());
		model.setDescription(soapModel.getDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ApplicationStatus> toModels(
		ApplicationStatusSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ApplicationStatus> models = new ArrayList<ApplicationStatus>(soapModels.length);

		for (ApplicationStatusSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.es.davinciti.liferay.model.ApplicationStatus"));

	public ApplicationStatusModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _applicationStatusId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setApplicationStatusId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _applicationStatusId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ApplicationStatus.class;
	}

	@Override
	public String getModelClassName() {
		return ApplicationStatus.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("applicationStatusId", getApplicationStatusId());
		attributes.put("applicationName", getApplicationName());
		attributes.put("statusId", getStatusId());
		attributes.put("name", getName());
		attributes.put("description", getDescription());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long applicationStatusId = (Long)attributes.get("applicationStatusId");

		if (applicationStatusId != null) {
			setApplicationStatusId(applicationStatusId);
		}

		String applicationName = (String)attributes.get("applicationName");

		if (applicationName != null) {
			setApplicationName(applicationName);
		}

		String statusId = (String)attributes.get("statusId");

		if (statusId != null) {
			setStatusId(statusId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}
	}

	@JSON
	@Override
	public long getApplicationStatusId() {
		return _applicationStatusId;
	}

	@Override
	public void setApplicationStatusId(long applicationStatusId) {
		_applicationStatusId = applicationStatusId;
	}

	@JSON
	@Override
	public String getApplicationName() {
		if (_applicationName == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicationName;
		}
	}

	@Override
	public void setApplicationName(String applicationName) {
		_columnBitmask |= APPLICATIONNAME_COLUMN_BITMASK;

		if (_originalApplicationName == null) {
			_originalApplicationName = _applicationName;
		}

		_applicationName = applicationName;
	}

	public String getOriginalApplicationName() {
		return GetterUtil.getString(_originalApplicationName);
	}

	@JSON
	@Override
	public String getStatusId() {
		if (_statusId == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusId;
		}
	}

	@Override
	public void setStatusId(String statusId) {
		_columnBitmask |= STATUSID_COLUMN_BITMASK;

		if (_originalStatusId == null) {
			_originalStatusId = _statusId;
		}

		_statusId = statusId;
	}

	public String getOriginalStatusId() {
		return GetterUtil.getString(_originalStatusId);
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ApplicationStatus.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ApplicationStatus toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ApplicationStatus)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ApplicationStatusImpl applicationStatusImpl = new ApplicationStatusImpl();

		applicationStatusImpl.setApplicationStatusId(getApplicationStatusId());
		applicationStatusImpl.setApplicationName(getApplicationName());
		applicationStatusImpl.setStatusId(getStatusId());
		applicationStatusImpl.setName(getName());
		applicationStatusImpl.setDescription(getDescription());

		applicationStatusImpl.resetOriginalValues();

		return applicationStatusImpl;
	}

	@Override
	public int compareTo(ApplicationStatus applicationStatus) {
		long primaryKey = applicationStatus.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ApplicationStatus)) {
			return false;
		}

		ApplicationStatus applicationStatus = (ApplicationStatus)obj;

		long primaryKey = applicationStatus.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ApplicationStatusModelImpl applicationStatusModelImpl = this;

		applicationStatusModelImpl._originalApplicationName = applicationStatusModelImpl._applicationName;

		applicationStatusModelImpl._originalStatusId = applicationStatusModelImpl._statusId;

		applicationStatusModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ApplicationStatus> toCacheModel() {
		ApplicationStatusCacheModel applicationStatusCacheModel = new ApplicationStatusCacheModel();

		applicationStatusCacheModel.applicationStatusId = getApplicationStatusId();

		applicationStatusCacheModel.applicationName = getApplicationName();

		String applicationName = applicationStatusCacheModel.applicationName;

		if ((applicationName != null) && (applicationName.length() == 0)) {
			applicationStatusCacheModel.applicationName = null;
		}

		applicationStatusCacheModel.statusId = getStatusId();

		String statusId = applicationStatusCacheModel.statusId;

		if ((statusId != null) && (statusId.length() == 0)) {
			applicationStatusCacheModel.statusId = null;
		}

		applicationStatusCacheModel.name = getName();

		String name = applicationStatusCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			applicationStatusCacheModel.name = null;
		}

		applicationStatusCacheModel.description = getDescription();

		String description = applicationStatusCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			applicationStatusCacheModel.description = null;
		}

		return applicationStatusCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{applicationStatusId=");
		sb.append(getApplicationStatusId());
		sb.append(", applicationName=");
		sb.append(getApplicationName());
		sb.append(", statusId=");
		sb.append(getStatusId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("es.davinciti.liferay.model.ApplicationStatus");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>applicationStatusId</column-name><column-value><![CDATA[");
		sb.append(getApplicationStatusId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicationName</column-name><column-value><![CDATA[");
		sb.append(getApplicationName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusId</column-name><column-value><![CDATA[");
		sb.append(getStatusId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ApplicationStatus.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ApplicationStatus.class
		};
	private long _applicationStatusId;
	private String _applicationName;
	private String _originalApplicationName;
	private String _statusId;
	private String _originalStatusId;
	private String _name;
	private String _description;
	private long _columnBitmask;
	private ApplicationStatus _escapedModel;
}