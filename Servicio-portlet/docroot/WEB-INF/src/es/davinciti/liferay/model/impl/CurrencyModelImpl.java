/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package es.davinciti.liferay.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import es.davinciti.liferay.model.Currency;
import es.davinciti.liferay.model.CurrencyModel;
import es.davinciti.liferay.model.CurrencySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Currency service. Represents a row in the &quot;CMES_Currency&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link es.davinciti.liferay.model.CurrencyModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CurrencyImpl}.
 * </p>
 *
 * @author Cmes
 * @see CurrencyImpl
 * @see es.davinciti.liferay.model.Currency
 * @see es.davinciti.liferay.model.CurrencyModel
 * @generated
 */
@JSON(strict = true)
public class CurrencyModelImpl extends BaseModelImpl<Currency>
	implements CurrencyModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a currency model instance should use the {@link es.davinciti.liferay.model.Currency} interface instead.
	 */
	public static final String TABLE_NAME = "CMES_Currency";
	public static final Object[][] TABLE_COLUMNS = {
			{ "currencyId", Types.BIGINT },
			{ "ccyMnrUnts", Types.VARCHAR },
			{ "ccyName", Types.VARCHAR },
			{ "ccyNumber", Types.VARCHAR },
			{ "code_", Types.VARCHAR },
			{ "countryName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table CMES_Currency (currencyId LONG not null primary key,ccyMnrUnts VARCHAR(75) null,ccyName VARCHAR(75) null,ccyNumber VARCHAR(75) null,code_ VARCHAR(75) null,countryName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table CMES_Currency";
	public static final String ORDER_BY_JPQL = " ORDER BY currency.currencyId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CMES_Currency.currencyId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.es.davinciti.liferay.model.Currency"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.es.davinciti.liferay.model.Currency"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Currency toModel(CurrencySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Currency model = new CurrencyImpl();

		model.setCurrencyId(soapModel.getCurrencyId());
		model.setCcyMnrUnts(soapModel.getCcyMnrUnts());
		model.setCcyName(soapModel.getCcyName());
		model.setCcyNumber(soapModel.getCcyNumber());
		model.setCode(soapModel.getCode());
		model.setCountryName(soapModel.getCountryName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Currency> toModels(CurrencySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Currency> models = new ArrayList<Currency>(soapModels.length);

		for (CurrencySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String MAPPING_TABLE_CMES_LINEAS_CURRENCIES_NAME = "CMES_Lineas_Currencies";
	public static final Object[][] MAPPING_TABLE_CMES_LINEAS_CURRENCIES_COLUMNS = {
			{ "currencyId", Types.BIGINT },
			{ "lineagastoId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_CMES_LINEAS_CURRENCIES_SQL_CREATE = "create table CMES_Lineas_Currencies (currencyId LONG not null,lineagastoId LONG not null,primary key (currencyId, lineagastoId))";
	public static final boolean FINDER_CACHE_ENABLED_CMES_LINEAS_CURRENCIES = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.CMES_Lineas_Currencies"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.es.davinciti.liferay.model.Currency"));

	public CurrencyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _currencyId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCurrencyId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _currencyId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Currency.class;
	}

	@Override
	public String getModelClassName() {
		return Currency.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("currencyId", getCurrencyId());
		attributes.put("ccyMnrUnts", getCcyMnrUnts());
		attributes.put("ccyName", getCcyName());
		attributes.put("ccyNumber", getCcyNumber());
		attributes.put("code", getCode());
		attributes.put("countryName", getCountryName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long currencyId = (Long)attributes.get("currencyId");

		if (currencyId != null) {
			setCurrencyId(currencyId);
		}

		String ccyMnrUnts = (String)attributes.get("ccyMnrUnts");

		if (ccyMnrUnts != null) {
			setCcyMnrUnts(ccyMnrUnts);
		}

		String ccyName = (String)attributes.get("ccyName");

		if (ccyName != null) {
			setCcyName(ccyName);
		}

		String ccyNumber = (String)attributes.get("ccyNumber");

		if (ccyNumber != null) {
			setCcyNumber(ccyNumber);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		String countryName = (String)attributes.get("countryName");

		if (countryName != null) {
			setCountryName(countryName);
		}
	}

	@JSON
	@Override
	public long getCurrencyId() {
		return _currencyId;
	}

	@Override
	public void setCurrencyId(long currencyId) {
		_currencyId = currencyId;
	}

	@JSON
	@Override
	public String getCcyMnrUnts() {
		if (_ccyMnrUnts == null) {
			return StringPool.BLANK;
		}
		else {
			return _ccyMnrUnts;
		}
	}

	@Override
	public void setCcyMnrUnts(String ccyMnrUnts) {
		_ccyMnrUnts = ccyMnrUnts;
	}

	@JSON
	@Override
	public String getCcyName() {
		if (_ccyName == null) {
			return StringPool.BLANK;
		}
		else {
			return _ccyName;
		}
	}

	@Override
	public void setCcyName(String ccyName) {
		_ccyName = ccyName;
	}

	@JSON
	@Override
	public String getCcyNumber() {
		if (_ccyNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _ccyNumber;
		}
	}

	@Override
	public void setCcyNumber(String ccyNumber) {
		_ccyNumber = ccyNumber;
	}

	@JSON
	@Override
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_code = code;
	}

	@JSON
	@Override
	public String getCountryName() {
		if (_countryName == null) {
			return StringPool.BLANK;
		}
		else {
			return _countryName;
		}
	}

	@Override
	public void setCountryName(String countryName) {
		_countryName = countryName;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Currency.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Currency toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Currency)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CurrencyImpl currencyImpl = new CurrencyImpl();

		currencyImpl.setCurrencyId(getCurrencyId());
		currencyImpl.setCcyMnrUnts(getCcyMnrUnts());
		currencyImpl.setCcyName(getCcyName());
		currencyImpl.setCcyNumber(getCcyNumber());
		currencyImpl.setCode(getCode());
		currencyImpl.setCountryName(getCountryName());

		currencyImpl.resetOriginalValues();

		return currencyImpl;
	}

	@Override
	public int compareTo(Currency currency) {
		long primaryKey = currency.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Currency)) {
			return false;
		}

		Currency currency = (Currency)obj;

		long primaryKey = currency.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Currency> toCacheModel() {
		CurrencyCacheModel currencyCacheModel = new CurrencyCacheModel();

		currencyCacheModel.currencyId = getCurrencyId();

		currencyCacheModel.ccyMnrUnts = getCcyMnrUnts();

		String ccyMnrUnts = currencyCacheModel.ccyMnrUnts;

		if ((ccyMnrUnts != null) && (ccyMnrUnts.length() == 0)) {
			currencyCacheModel.ccyMnrUnts = null;
		}

		currencyCacheModel.ccyName = getCcyName();

		String ccyName = currencyCacheModel.ccyName;

		if ((ccyName != null) && (ccyName.length() == 0)) {
			currencyCacheModel.ccyName = null;
		}

		currencyCacheModel.ccyNumber = getCcyNumber();

		String ccyNumber = currencyCacheModel.ccyNumber;

		if ((ccyNumber != null) && (ccyNumber.length() == 0)) {
			currencyCacheModel.ccyNumber = null;
		}

		currencyCacheModel.code = getCode();

		String code = currencyCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			currencyCacheModel.code = null;
		}

		currencyCacheModel.countryName = getCountryName();

		String countryName = currencyCacheModel.countryName;

		if ((countryName != null) && (countryName.length() == 0)) {
			currencyCacheModel.countryName = null;
		}

		return currencyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{currencyId=");
		sb.append(getCurrencyId());
		sb.append(", ccyMnrUnts=");
		sb.append(getCcyMnrUnts());
		sb.append(", ccyName=");
		sb.append(getCcyName());
		sb.append(", ccyNumber=");
		sb.append(getCcyNumber());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", countryName=");
		sb.append(getCountryName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("es.davinciti.liferay.model.Currency");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>currencyId</column-name><column-value><![CDATA[");
		sb.append(getCurrencyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ccyMnrUnts</column-name><column-value><![CDATA[");
		sb.append(getCcyMnrUnts());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ccyName</column-name><column-value><![CDATA[");
		sb.append(getCcyName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ccyNumber</column-name><column-value><![CDATA[");
		sb.append(getCcyNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countryName</column-name><column-value><![CDATA[");
		sb.append(getCountryName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Currency.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Currency.class
		};
	private long _currencyId;
	private String _ccyMnrUnts;
	private String _ccyName;
	private String _ccyNumber;
	private String _code;
	private String _countryName;
	private Currency _escapedModel;
}