/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package es.davinciti.liferay.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import es.davinciti.liferay.model.TipoDiaCalendar;
import es.davinciti.liferay.model.TipoDiaCalendarModel;
import es.davinciti.liferay.model.TipoDiaCalendarSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TipoDiaCalendar service. Represents a row in the &quot;CMES_TipoDiaCalendar&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link es.davinciti.liferay.model.TipoDiaCalendarModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TipoDiaCalendarImpl}.
 * </p>
 *
 * @author Cmes
 * @see TipoDiaCalendarImpl
 * @see es.davinciti.liferay.model.TipoDiaCalendar
 * @see es.davinciti.liferay.model.TipoDiaCalendarModel
 * @generated
 */
@JSON(strict = true)
public class TipoDiaCalendarModelImpl extends BaseModelImpl<TipoDiaCalendar>
	implements TipoDiaCalendarModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tipo dia calendar model instance should use the {@link es.davinciti.liferay.model.TipoDiaCalendar} interface instead.
	 */
	public static final String TABLE_NAME = "CMES_TipoDiaCalendar";
	public static final Object[][] TABLE_COLUMNS = {
			{ "tipoDiaCalendarId", Types.BIGINT },
			{ "descripcion", Types.VARCHAR },
			{ "fondoColor", Types.VARCHAR },
			{ "letraColor", Types.VARCHAR },
			{ "strong", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table CMES_TipoDiaCalendar (tipoDiaCalendarId LONG not null primary key,descripcion VARCHAR(75) null,fondoColor VARCHAR(75) null,letraColor VARCHAR(75) null,strong VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table CMES_TipoDiaCalendar";
	public static final String ORDER_BY_JPQL = " ORDER BY tipoDiaCalendar.tipoDiaCalendarId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CMES_TipoDiaCalendar.tipoDiaCalendarId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.es.davinciti.liferay.model.TipoDiaCalendar"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.es.davinciti.liferay.model.TipoDiaCalendar"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.es.davinciti.liferay.model.TipoDiaCalendar"),
			true);
	public static long DESCRIPCION_COLUMN_BITMASK = 1L;
	public static long TIPODIACALENDARID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TipoDiaCalendar toModel(TipoDiaCalendarSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TipoDiaCalendar model = new TipoDiaCalendarImpl();

		model.setTipoDiaCalendarId(soapModel.getTipoDiaCalendarId());
		model.setDescripcion(soapModel.getDescripcion());
		model.setFondoColor(soapModel.getFondoColor());
		model.setLetraColor(soapModel.getLetraColor());
		model.setStrong(soapModel.getStrong());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TipoDiaCalendar> toModels(
		TipoDiaCalendarSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TipoDiaCalendar> models = new ArrayList<TipoDiaCalendar>(soapModels.length);

		for (TipoDiaCalendarSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.es.davinciti.liferay.model.TipoDiaCalendar"));

	public TipoDiaCalendarModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _tipoDiaCalendarId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTipoDiaCalendarId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _tipoDiaCalendarId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TipoDiaCalendar.class;
	}

	@Override
	public String getModelClassName() {
		return TipoDiaCalendar.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("tipoDiaCalendarId", getTipoDiaCalendarId());
		attributes.put("descripcion", getDescripcion());
		attributes.put("fondoColor", getFondoColor());
		attributes.put("letraColor", getLetraColor());
		attributes.put("strong", getStrong());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long tipoDiaCalendarId = (Long)attributes.get("tipoDiaCalendarId");

		if (tipoDiaCalendarId != null) {
			setTipoDiaCalendarId(tipoDiaCalendarId);
		}

		String descripcion = (String)attributes.get("descripcion");

		if (descripcion != null) {
			setDescripcion(descripcion);
		}

		String fondoColor = (String)attributes.get("fondoColor");

		if (fondoColor != null) {
			setFondoColor(fondoColor);
		}

		String letraColor = (String)attributes.get("letraColor");

		if (letraColor != null) {
			setLetraColor(letraColor);
		}

		String strong = (String)attributes.get("strong");

		if (strong != null) {
			setStrong(strong);
		}
	}

	@JSON
	@Override
	public long getTipoDiaCalendarId() {
		return _tipoDiaCalendarId;
	}

	@Override
	public void setTipoDiaCalendarId(long tipoDiaCalendarId) {
		_tipoDiaCalendarId = tipoDiaCalendarId;
	}

	@JSON
	@Override
	public String getDescripcion() {
		if (_descripcion == null) {
			return StringPool.BLANK;
		}
		else {
			return _descripcion;
		}
	}

	@Override
	public void setDescripcion(String descripcion) {
		_columnBitmask |= DESCRIPCION_COLUMN_BITMASK;

		if (_originalDescripcion == null) {
			_originalDescripcion = _descripcion;
		}

		_descripcion = descripcion;
	}

	public String getOriginalDescripcion() {
		return GetterUtil.getString(_originalDescripcion);
	}

	@JSON
	@Override
	public String getFondoColor() {
		if (_fondoColor == null) {
			return StringPool.BLANK;
		}
		else {
			return _fondoColor;
		}
	}

	@Override
	public void setFondoColor(String fondoColor) {
		_fondoColor = fondoColor;
	}

	@JSON
	@Override
	public String getLetraColor() {
		if (_letraColor == null) {
			return StringPool.BLANK;
		}
		else {
			return _letraColor;
		}
	}

	@Override
	public void setLetraColor(String letraColor) {
		_letraColor = letraColor;
	}

	@JSON
	@Override
	public String getStrong() {
		if (_strong == null) {
			return StringPool.BLANK;
		}
		else {
			return _strong;
		}
	}

	@Override
	public void setStrong(String strong) {
		_strong = strong;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TipoDiaCalendar.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TipoDiaCalendar toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TipoDiaCalendar)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TipoDiaCalendarImpl tipoDiaCalendarImpl = new TipoDiaCalendarImpl();

		tipoDiaCalendarImpl.setTipoDiaCalendarId(getTipoDiaCalendarId());
		tipoDiaCalendarImpl.setDescripcion(getDescripcion());
		tipoDiaCalendarImpl.setFondoColor(getFondoColor());
		tipoDiaCalendarImpl.setLetraColor(getLetraColor());
		tipoDiaCalendarImpl.setStrong(getStrong());

		tipoDiaCalendarImpl.resetOriginalValues();

		return tipoDiaCalendarImpl;
	}

	@Override
	public int compareTo(TipoDiaCalendar tipoDiaCalendar) {
		long primaryKey = tipoDiaCalendar.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TipoDiaCalendar)) {
			return false;
		}

		TipoDiaCalendar tipoDiaCalendar = (TipoDiaCalendar)obj;

		long primaryKey = tipoDiaCalendar.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TipoDiaCalendarModelImpl tipoDiaCalendarModelImpl = this;

		tipoDiaCalendarModelImpl._originalDescripcion = tipoDiaCalendarModelImpl._descripcion;

		tipoDiaCalendarModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TipoDiaCalendar> toCacheModel() {
		TipoDiaCalendarCacheModel tipoDiaCalendarCacheModel = new TipoDiaCalendarCacheModel();

		tipoDiaCalendarCacheModel.tipoDiaCalendarId = getTipoDiaCalendarId();

		tipoDiaCalendarCacheModel.descripcion = getDescripcion();

		String descripcion = tipoDiaCalendarCacheModel.descripcion;

		if ((descripcion != null) && (descripcion.length() == 0)) {
			tipoDiaCalendarCacheModel.descripcion = null;
		}

		tipoDiaCalendarCacheModel.fondoColor = getFondoColor();

		String fondoColor = tipoDiaCalendarCacheModel.fondoColor;

		if ((fondoColor != null) && (fondoColor.length() == 0)) {
			tipoDiaCalendarCacheModel.fondoColor = null;
		}

		tipoDiaCalendarCacheModel.letraColor = getLetraColor();

		String letraColor = tipoDiaCalendarCacheModel.letraColor;

		if ((letraColor != null) && (letraColor.length() == 0)) {
			tipoDiaCalendarCacheModel.letraColor = null;
		}

		tipoDiaCalendarCacheModel.strong = getStrong();

		String strong = tipoDiaCalendarCacheModel.strong;

		if ((strong != null) && (strong.length() == 0)) {
			tipoDiaCalendarCacheModel.strong = null;
		}

		return tipoDiaCalendarCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{tipoDiaCalendarId=");
		sb.append(getTipoDiaCalendarId());
		sb.append(", descripcion=");
		sb.append(getDescripcion());
		sb.append(", fondoColor=");
		sb.append(getFondoColor());
		sb.append(", letraColor=");
		sb.append(getLetraColor());
		sb.append(", strong=");
		sb.append(getStrong());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("es.davinciti.liferay.model.TipoDiaCalendar");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>tipoDiaCalendarId</column-name><column-value><![CDATA[");
		sb.append(getTipoDiaCalendarId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>descripcion</column-name><column-value><![CDATA[");
		sb.append(getDescripcion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fondoColor</column-name><column-value><![CDATA[");
		sb.append(getFondoColor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>letraColor</column-name><column-value><![CDATA[");
		sb.append(getLetraColor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>strong</column-name><column-value><![CDATA[");
		sb.append(getStrong());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TipoDiaCalendar.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			TipoDiaCalendar.class
		};
	private long _tipoDiaCalendarId;
	private String _descripcion;
	private String _originalDescripcion;
	private String _fondoColor;
	private String _letraColor;
	private String _strong;
	private long _columnBitmask;
	private TipoDiaCalendar _escapedModel;
}