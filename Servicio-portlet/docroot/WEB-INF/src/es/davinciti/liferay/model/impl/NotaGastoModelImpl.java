/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package es.davinciti.liferay.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import es.davinciti.liferay.model.NotaGasto;
import es.davinciti.liferay.model.NotaGastoModel;
import es.davinciti.liferay.model.NotaGastoSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the NotaGasto service. Represents a row in the &quot;CMES_NotaGasto&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link es.davinciti.liferay.model.NotaGastoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NotaGastoImpl}.
 * </p>
 *
 * @author Cmes
 * @see NotaGastoImpl
 * @see es.davinciti.liferay.model.NotaGasto
 * @see es.davinciti.liferay.model.NotaGastoModel
 * @generated
 */
@JSON(strict = true)
public class NotaGastoModelImpl extends BaseModelImpl<NotaGasto>
	implements NotaGastoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a nota gasto model instance should use the {@link es.davinciti.liferay.model.NotaGasto} interface instead.
	 */
	public static final String TABLE_NAME = "CMES_NotaGasto";
	public static final Object[][] TABLE_COLUMNS = {
			{ "notagastoId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "description", Types.VARCHAR },
			{ "startDate", Types.VARCHAR },
			{ "endDate", Types.VARCHAR },
			{ "comments", Types.VARCHAR },
			{ "status", Types.VARCHAR },
			{ "amount", Types.VARCHAR },
			{ "createDate", Types.VARCHAR },
			{ "updateDate", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table CMES_NotaGasto (notagastoId LONG not null primary key,companyId LONG,userId LONG,description VARCHAR(75) null,startDate VARCHAR(75) null,endDate VARCHAR(75) null,comments VARCHAR(75) null,status VARCHAR(75) null,amount VARCHAR(75) null,createDate VARCHAR(75) null,updateDate VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table CMES_NotaGasto";
	public static final String ORDER_BY_JPQL = " ORDER BY notaGasto.notagastoId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CMES_NotaGasto.notagastoId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.es.davinciti.liferay.model.NotaGasto"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.es.davinciti.liferay.model.NotaGasto"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.es.davinciti.liferay.model.NotaGasto"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static long NOTAGASTOID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static NotaGasto toModel(NotaGastoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		NotaGasto model = new NotaGastoImpl();

		model.setNotagastoId(soapModel.getNotagastoId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setDescription(soapModel.getDescription());
		model.setStartDate(soapModel.getStartDate());
		model.setEndDate(soapModel.getEndDate());
		model.setComments(soapModel.getComments());
		model.setStatus(soapModel.getStatus());
		model.setAmount(soapModel.getAmount());
		model.setCreateDate(soapModel.getCreateDate());
		model.setUpdateDate(soapModel.getUpdateDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<NotaGasto> toModels(NotaGastoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<NotaGasto> models = new ArrayList<NotaGasto>(soapModels.length);

		for (NotaGastoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String MAPPING_TABLE_CMES_NOTAS_HISTORICONOTAS_NAME = "CMES_Notas_HistoricoNotas";
	public static final Object[][] MAPPING_TABLE_CMES_NOTAS_HISTORICONOTAS_COLUMNS =
		{
			{ "historiconotaId", Types.BIGINT },
			{ "notagastoId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_CMES_NOTAS_HISTORICONOTAS_SQL_CREATE =
		"create table CMES_Notas_HistoricoNotas (historiconotaId LONG not null,notagastoId LONG not null,primary key (historiconotaId, notagastoId))";
	public static final boolean FINDER_CACHE_ENABLED_CMES_NOTAS_HISTORICONOTAS = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.CMES_Notas_HistoricoNotas"),
			true);
	public static final String MAPPING_TABLE_CMES_NOTAS_LINEAS_NAME = "CMES_Notas_Lineas";
	public static final Object[][] MAPPING_TABLE_CMES_NOTAS_LINEAS_COLUMNS = {
			{ "lineagastoId", Types.BIGINT },
			{ "notagastoId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_CMES_NOTAS_LINEAS_SQL_CREATE = "create table CMES_Notas_Lineas (lineagastoId LONG not null,notagastoId LONG not null,primary key (lineagastoId, notagastoId))";
	public static final boolean FINDER_CACHE_ENABLED_CMES_NOTAS_LINEAS = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.CMES_Notas_Lineas"), true);
	public static final String MAPPING_TABLE_CMES_NOTAS_ORGANIZATIONSAGECOMPANIES_NAME =
		"CMES_Notas_OrganizationSageCompanies";
	public static final Object[][] MAPPING_TABLE_CMES_NOTAS_ORGANIZATIONSAGECOMPANIES_COLUMNS =
		{
			{ "notagastoId", Types.BIGINT },
			{ "orgsagecompanyId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_CMES_NOTAS_ORGANIZATIONSAGECOMPANIES_SQL_CREATE =
		"create table CMES_Notas_OrganizationSageCompanies (notagastoId LONG not null,orgsagecompanyId LONG not null,primary key (notagastoId, orgsagecompanyId))";
	public static final boolean FINDER_CACHE_ENABLED_CMES_NOTAS_ORGANIZATIONSAGECOMPANIES =
		GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.CMES_Notas_OrganizationSageCompanies"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.es.davinciti.liferay.model.NotaGasto"));

	public NotaGastoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _notagastoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNotagastoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _notagastoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return NotaGasto.class;
	}

	@Override
	public String getModelClassName() {
		return NotaGasto.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("notagastoId", getNotagastoId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("description", getDescription());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());
		attributes.put("comments", getComments());
		attributes.put("status", getStatus());
		attributes.put("amount", getAmount());
		attributes.put("createDate", getCreateDate());
		attributes.put("updateDate", getUpdateDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long notagastoId = (Long)attributes.get("notagastoId");

		if (notagastoId != null) {
			setNotagastoId(notagastoId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String startDate = (String)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		String endDate = (String)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		String comments = (String)attributes.get("comments");

		if (comments != null) {
			setComments(comments);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String amount = (String)attributes.get("amount");

		if (amount != null) {
			setAmount(amount);
		}

		String createDate = (String)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		String updateDate = (String)attributes.get("updateDate");

		if (updateDate != null) {
			setUpdateDate(updateDate);
		}
	}

	@JSON
	@Override
	public long getNotagastoId() {
		return _notagastoId;
	}

	@Override
	public void setNotagastoId(long notagastoId) {
		_notagastoId = notagastoId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getStartDate() {
		if (_startDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _startDate;
		}
	}

	@Override
	public void setStartDate(String startDate) {
		_startDate = startDate;
	}

	@JSON
	@Override
	public String getEndDate() {
		if (_endDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _endDate;
		}
	}

	@Override
	public void setEndDate(String endDate) {
		_endDate = endDate;
	}

	@JSON
	@Override
	public String getComments() {
		if (_comments == null) {
			return StringPool.BLANK;
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		_comments = comments;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_status = status;
	}

	@JSON
	@Override
	public String getAmount() {
		if (_amount == null) {
			return StringPool.BLANK;
		}
		else {
			return _amount;
		}
	}

	@Override
	public void setAmount(String amount) {
		_amount = amount;
	}

	@JSON
	@Override
	public String getCreateDate() {
		if (_createDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _createDate;
		}
	}

	@Override
	public void setCreateDate(String createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public String getUpdateDate() {
		if (_updateDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _updateDate;
		}
	}

	@Override
	public void setUpdateDate(String updateDate) {
		_updateDate = updateDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			NotaGasto.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public NotaGasto toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (NotaGasto)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NotaGastoImpl notaGastoImpl = new NotaGastoImpl();

		notaGastoImpl.setNotagastoId(getNotagastoId());
		notaGastoImpl.setCompanyId(getCompanyId());
		notaGastoImpl.setUserId(getUserId());
		notaGastoImpl.setDescription(getDescription());
		notaGastoImpl.setStartDate(getStartDate());
		notaGastoImpl.setEndDate(getEndDate());
		notaGastoImpl.setComments(getComments());
		notaGastoImpl.setStatus(getStatus());
		notaGastoImpl.setAmount(getAmount());
		notaGastoImpl.setCreateDate(getCreateDate());
		notaGastoImpl.setUpdateDate(getUpdateDate());

		notaGastoImpl.resetOriginalValues();

		return notaGastoImpl;
	}

	@Override
	public int compareTo(NotaGasto notaGasto) {
		long primaryKey = notaGasto.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof NotaGasto)) {
			return false;
		}

		NotaGasto notaGasto = (NotaGasto)obj;

		long primaryKey = notaGasto.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		NotaGastoModelImpl notaGastoModelImpl = this;

		notaGastoModelImpl._originalCompanyId = notaGastoModelImpl._companyId;

		notaGastoModelImpl._setOriginalCompanyId = false;

		notaGastoModelImpl._originalUserId = notaGastoModelImpl._userId;

		notaGastoModelImpl._setOriginalUserId = false;

		notaGastoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<NotaGasto> toCacheModel() {
		NotaGastoCacheModel notaGastoCacheModel = new NotaGastoCacheModel();

		notaGastoCacheModel.notagastoId = getNotagastoId();

		notaGastoCacheModel.companyId = getCompanyId();

		notaGastoCacheModel.userId = getUserId();

		notaGastoCacheModel.description = getDescription();

		String description = notaGastoCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			notaGastoCacheModel.description = null;
		}

		notaGastoCacheModel.startDate = getStartDate();

		String startDate = notaGastoCacheModel.startDate;

		if ((startDate != null) && (startDate.length() == 0)) {
			notaGastoCacheModel.startDate = null;
		}

		notaGastoCacheModel.endDate = getEndDate();

		String endDate = notaGastoCacheModel.endDate;

		if ((endDate != null) && (endDate.length() == 0)) {
			notaGastoCacheModel.endDate = null;
		}

		notaGastoCacheModel.comments = getComments();

		String comments = notaGastoCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			notaGastoCacheModel.comments = null;
		}

		notaGastoCacheModel.status = getStatus();

		String status = notaGastoCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			notaGastoCacheModel.status = null;
		}

		notaGastoCacheModel.amount = getAmount();

		String amount = notaGastoCacheModel.amount;

		if ((amount != null) && (amount.length() == 0)) {
			notaGastoCacheModel.amount = null;
		}

		notaGastoCacheModel.createDate = getCreateDate();

		String createDate = notaGastoCacheModel.createDate;

		if ((createDate != null) && (createDate.length() == 0)) {
			notaGastoCacheModel.createDate = null;
		}

		notaGastoCacheModel.updateDate = getUpdateDate();

		String updateDate = notaGastoCacheModel.updateDate;

		if ((updateDate != null) && (updateDate.length() == 0)) {
			notaGastoCacheModel.updateDate = null;
		}

		return notaGastoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{notagastoId=");
		sb.append(getNotagastoId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", comments=");
		sb.append(getComments());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", amount=");
		sb.append(getAmount());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", updateDate=");
		sb.append(getUpdateDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("es.davinciti.liferay.model.NotaGasto");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>notagastoId</column-name><column-value><![CDATA[");
		sb.append(getNotagastoId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amount</column-name><column-value><![CDATA[");
		sb.append(getAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updateDate</column-name><column-value><![CDATA[");
		sb.append(getUpdateDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = NotaGasto.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			NotaGasto.class
		};
	private long _notagastoId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _description;
	private String _startDate;
	private String _endDate;
	private String _comments;
	private String _status;
	private String _amount;
	private String _createDate;
	private String _updateDate;
	private long _columnBitmask;
	private NotaGasto _escapedModel;
}