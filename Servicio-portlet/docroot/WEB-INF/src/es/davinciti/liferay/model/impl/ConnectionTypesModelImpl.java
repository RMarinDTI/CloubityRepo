/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package es.davinciti.liferay.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import es.davinciti.liferay.model.ConnectionTypes;
import es.davinciti.liferay.model.ConnectionTypesModel;
import es.davinciti.liferay.model.ConnectionTypesSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ConnectionTypes service. Represents a row in the &quot;CMES_ConnectionTypes&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link es.davinciti.liferay.model.ConnectionTypesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ConnectionTypesImpl}.
 * </p>
 *
 * @author Cmes
 * @see ConnectionTypesImpl
 * @see es.davinciti.liferay.model.ConnectionTypes
 * @see es.davinciti.liferay.model.ConnectionTypesModel
 * @generated
 */
@JSON(strict = true)
public class ConnectionTypesModelImpl extends BaseModelImpl<ConnectionTypes>
	implements ConnectionTypesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a connection types model instance should use the {@link es.davinciti.liferay.model.ConnectionTypes} interface instead.
	 */
	public static final String TABLE_NAME = "CMES_ConnectionTypes";
	public static final Object[][] TABLE_COLUMNS = {
			{ "connectionTypeId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "disableDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table CMES_ConnectionTypes (connectionTypeId LONG not null primary key,name VARCHAR(75) null,disableDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table CMES_ConnectionTypes";
	public static final String ORDER_BY_JPQL = " ORDER BY connectionTypes.connectionTypeId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CMES_ConnectionTypes.connectionTypeId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.es.davinciti.liferay.model.ConnectionTypes"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.es.davinciti.liferay.model.ConnectionTypes"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ConnectionTypes toModel(ConnectionTypesSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ConnectionTypes model = new ConnectionTypesImpl();

		model.setConnectionTypeId(soapModel.getConnectionTypeId());
		model.setName(soapModel.getName());
		model.setDisableDate(soapModel.getDisableDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ConnectionTypes> toModels(
		ConnectionTypesSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ConnectionTypes> models = new ArrayList<ConnectionTypes>(soapModels.length);

		for (ConnectionTypesSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String MAPPING_TABLE_CMES_CONFIGS_TYPES_NAME = "CMES_Configs_Types";
	public static final Object[][] MAPPING_TABLE_CMES_CONFIGS_TYPES_COLUMNS = {
			{ "configId", Types.BIGINT },
			{ "connectionTypeId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_CMES_CONFIGS_TYPES_SQL_CREATE = "create table CMES_Configs_Types (configId LONG not null,connectionTypeId LONG not null,primary key (configId, connectionTypeId))";
	public static final boolean FINDER_CACHE_ENABLED_CMES_CONFIGS_TYPES = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.CMES_Configs_Types"), true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.es.davinciti.liferay.model.ConnectionTypes"));

	public ConnectionTypesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _connectionTypeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setConnectionTypeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _connectionTypeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ConnectionTypes.class;
	}

	@Override
	public String getModelClassName() {
		return ConnectionTypes.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("connectionTypeId", getConnectionTypeId());
		attributes.put("name", getName());
		attributes.put("disableDate", getDisableDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long connectionTypeId = (Long)attributes.get("connectionTypeId");

		if (connectionTypeId != null) {
			setConnectionTypeId(connectionTypeId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Date disableDate = (Date)attributes.get("disableDate");

		if (disableDate != null) {
			setDisableDate(disableDate);
		}
	}

	@JSON
	@Override
	public long getConnectionTypeId() {
		return _connectionTypeId;
	}

	@Override
	public void setConnectionTypeId(long connectionTypeId) {
		_connectionTypeId = connectionTypeId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public Date getDisableDate() {
		return _disableDate;
	}

	@Override
	public void setDisableDate(Date disableDate) {
		_disableDate = disableDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ConnectionTypes.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ConnectionTypes toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ConnectionTypes)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ConnectionTypesImpl connectionTypesImpl = new ConnectionTypesImpl();

		connectionTypesImpl.setConnectionTypeId(getConnectionTypeId());
		connectionTypesImpl.setName(getName());
		connectionTypesImpl.setDisableDate(getDisableDate());

		connectionTypesImpl.resetOriginalValues();

		return connectionTypesImpl;
	}

	@Override
	public int compareTo(ConnectionTypes connectionTypes) {
		long primaryKey = connectionTypes.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ConnectionTypes)) {
			return false;
		}

		ConnectionTypes connectionTypes = (ConnectionTypes)obj;

		long primaryKey = connectionTypes.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ConnectionTypes> toCacheModel() {
		ConnectionTypesCacheModel connectionTypesCacheModel = new ConnectionTypesCacheModel();

		connectionTypesCacheModel.connectionTypeId = getConnectionTypeId();

		connectionTypesCacheModel.name = getName();

		String name = connectionTypesCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			connectionTypesCacheModel.name = null;
		}

		Date disableDate = getDisableDate();

		if (disableDate != null) {
			connectionTypesCacheModel.disableDate = disableDate.getTime();
		}
		else {
			connectionTypesCacheModel.disableDate = Long.MIN_VALUE;
		}

		return connectionTypesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{connectionTypeId=");
		sb.append(getConnectionTypeId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", disableDate=");
		sb.append(getDisableDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("es.davinciti.liferay.model.ConnectionTypes");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>connectionTypeId</column-name><column-value><![CDATA[");
		sb.append(getConnectionTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>disableDate</column-name><column-value><![CDATA[");
		sb.append(getDisableDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ConnectionTypes.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ConnectionTypes.class
		};
	private long _connectionTypeId;
	private String _name;
	private Date _disableDate;
	private ConnectionTypes _escapedModel;
}