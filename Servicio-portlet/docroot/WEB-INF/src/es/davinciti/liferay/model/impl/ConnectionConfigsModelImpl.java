/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package es.davinciti.liferay.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import es.davinciti.liferay.model.ConnectionConfigs;
import es.davinciti.liferay.model.ConnectionConfigsModel;
import es.davinciti.liferay.model.ConnectionConfigsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ConnectionConfigs service. Represents a row in the &quot;CMES_ConnectionConfigs&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link es.davinciti.liferay.model.ConnectionConfigsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ConnectionConfigsImpl}.
 * </p>
 *
 * @author Cmes
 * @see ConnectionConfigsImpl
 * @see es.davinciti.liferay.model.ConnectionConfigs
 * @see es.davinciti.liferay.model.ConnectionConfigsModel
 * @generated
 */
@JSON(strict = true)
public class ConnectionConfigsModelImpl extends BaseModelImpl<ConnectionConfigs>
	implements ConnectionConfigsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a connection configs model instance should use the {@link es.davinciti.liferay.model.ConnectionConfigs} interface instead.
	 */
	public static final String TABLE_NAME = "CMES_ConnectionConfigs";
	public static final Object[][] TABLE_COLUMNS = {
			{ "configId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "installationId", Types.VARCHAR },
			{ "companyCode", Types.VARCHAR },
			{ "productCode", Types.VARCHAR },
			{ "disableDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table CMES_ConnectionConfigs (configId LONG not null primary key,companyId LONG,installationId VARCHAR(75) null,companyCode VARCHAR(75) null,productCode VARCHAR(75) null,disableDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table CMES_ConnectionConfigs";
	public static final String ORDER_BY_JPQL = " ORDER BY connectionConfigs.configId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CMES_ConnectionConfigs.configId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.es.davinciti.liferay.model.ConnectionConfigs"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.es.davinciti.liferay.model.ConnectionConfigs"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.es.davinciti.liferay.model.ConnectionConfigs"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long CONFIGID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ConnectionConfigs toModel(ConnectionConfigsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ConnectionConfigs model = new ConnectionConfigsImpl();

		model.setConfigId(soapModel.getConfigId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setInstallationId(soapModel.getInstallationId());
		model.setCompanyCode(soapModel.getCompanyCode());
		model.setProductCode(soapModel.getProductCode());
		model.setDisableDate(soapModel.getDisableDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ConnectionConfigs> toModels(
		ConnectionConfigsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ConnectionConfigs> models = new ArrayList<ConnectionConfigs>(soapModels.length);

		for (ConnectionConfigsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String MAPPING_TABLE_CMES_CONFIGS_TYPES_NAME = "CMES_Configs_Types";
	public static final Object[][] MAPPING_TABLE_CMES_CONFIGS_TYPES_COLUMNS = {
			{ "configId", Types.BIGINT },
			{ "connectionTypeId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_CMES_CONFIGS_TYPES_SQL_CREATE = "create table CMES_Configs_Types (configId LONG not null,connectionTypeId LONG not null,primary key (configId, connectionTypeId))";
	public static final boolean FINDER_CACHE_ENABLED_CMES_CONFIGS_TYPES = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.CMES_Configs_Types"), true);
	public static final String MAPPING_TABLE_CMES_CONFIGS_ACTIONS_NAME = "CMES_Configs_Actions";
	public static final Object[][] MAPPING_TABLE_CMES_CONFIGS_ACTIONS_COLUMNS = {
			{ "connectionActionTypeId", Types.BIGINT },
			{ "configId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_CMES_CONFIGS_ACTIONS_SQL_CREATE = "create table CMES_Configs_Actions (connectionActionTypeId LONG not null,configId LONG not null,primary key (connectionActionTypeId, configId))";
	public static final boolean FINDER_CACHE_ENABLED_CMES_CONFIGS_ACTIONS = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.CMES_Configs_Actions"), true);
	public static final String MAPPING_TABLE_CMES_CONFIGS_DATAS_NAME = "CMES_Configs_Datas";
	public static final Object[][] MAPPING_TABLE_CMES_CONFIGS_DATAS_COLUMNS = {
			{ "configId", Types.BIGINT },
			{ "connectionDataId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_CMES_CONFIGS_DATAS_SQL_CREATE = "create table CMES_Configs_Datas (configId LONG not null,connectionDataId LONG not null,primary key (configId, connectionDataId))";
	public static final boolean FINDER_CACHE_ENABLED_CMES_CONFIGS_DATAS = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.CMES_Configs_Datas"), true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.es.davinciti.liferay.model.ConnectionConfigs"));

	public ConnectionConfigsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _configId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setConfigId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _configId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ConnectionConfigs.class;
	}

	@Override
	public String getModelClassName() {
		return ConnectionConfigs.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("configId", getConfigId());
		attributes.put("companyId", getCompanyId());
		attributes.put("installationId", getInstallationId());
		attributes.put("companyCode", getCompanyCode());
		attributes.put("productCode", getProductCode());
		attributes.put("disableDate", getDisableDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long configId = (Long)attributes.get("configId");

		if (configId != null) {
			setConfigId(configId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String installationId = (String)attributes.get("installationId");

		if (installationId != null) {
			setInstallationId(installationId);
		}

		String companyCode = (String)attributes.get("companyCode");

		if (companyCode != null) {
			setCompanyCode(companyCode);
		}

		String productCode = (String)attributes.get("productCode");

		if (productCode != null) {
			setProductCode(productCode);
		}

		Date disableDate = (Date)attributes.get("disableDate");

		if (disableDate != null) {
			setDisableDate(disableDate);
		}
	}

	@JSON
	@Override
	public long getConfigId() {
		return _configId;
	}

	@Override
	public void setConfigId(long configId) {
		_configId = configId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public String getInstallationId() {
		if (_installationId == null) {
			return StringPool.BLANK;
		}
		else {
			return _installationId;
		}
	}

	@Override
	public void setInstallationId(String installationId) {
		_installationId = installationId;
	}

	@JSON
	@Override
	public String getCompanyCode() {
		if (_companyCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _companyCode;
		}
	}

	@Override
	public void setCompanyCode(String companyCode) {
		_companyCode = companyCode;
	}

	@JSON
	@Override
	public String getProductCode() {
		if (_productCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _productCode;
		}
	}

	@Override
	public void setProductCode(String productCode) {
		_productCode = productCode;
	}

	@JSON
	@Override
	public Date getDisableDate() {
		return _disableDate;
	}

	@Override
	public void setDisableDate(Date disableDate) {
		_disableDate = disableDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ConnectionConfigs.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ConnectionConfigs toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ConnectionConfigs)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ConnectionConfigsImpl connectionConfigsImpl = new ConnectionConfigsImpl();

		connectionConfigsImpl.setConfigId(getConfigId());
		connectionConfigsImpl.setCompanyId(getCompanyId());
		connectionConfigsImpl.setInstallationId(getInstallationId());
		connectionConfigsImpl.setCompanyCode(getCompanyCode());
		connectionConfigsImpl.setProductCode(getProductCode());
		connectionConfigsImpl.setDisableDate(getDisableDate());

		connectionConfigsImpl.resetOriginalValues();

		return connectionConfigsImpl;
	}

	@Override
	public int compareTo(ConnectionConfigs connectionConfigs) {
		long primaryKey = connectionConfigs.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ConnectionConfigs)) {
			return false;
		}

		ConnectionConfigs connectionConfigs = (ConnectionConfigs)obj;

		long primaryKey = connectionConfigs.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ConnectionConfigsModelImpl connectionConfigsModelImpl = this;

		connectionConfigsModelImpl._originalCompanyId = connectionConfigsModelImpl._companyId;

		connectionConfigsModelImpl._setOriginalCompanyId = false;

		connectionConfigsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ConnectionConfigs> toCacheModel() {
		ConnectionConfigsCacheModel connectionConfigsCacheModel = new ConnectionConfigsCacheModel();

		connectionConfigsCacheModel.configId = getConfigId();

		connectionConfigsCacheModel.companyId = getCompanyId();

		connectionConfigsCacheModel.installationId = getInstallationId();

		String installationId = connectionConfigsCacheModel.installationId;

		if ((installationId != null) && (installationId.length() == 0)) {
			connectionConfigsCacheModel.installationId = null;
		}

		connectionConfigsCacheModel.companyCode = getCompanyCode();

		String companyCode = connectionConfigsCacheModel.companyCode;

		if ((companyCode != null) && (companyCode.length() == 0)) {
			connectionConfigsCacheModel.companyCode = null;
		}

		connectionConfigsCacheModel.productCode = getProductCode();

		String productCode = connectionConfigsCacheModel.productCode;

		if ((productCode != null) && (productCode.length() == 0)) {
			connectionConfigsCacheModel.productCode = null;
		}

		Date disableDate = getDisableDate();

		if (disableDate != null) {
			connectionConfigsCacheModel.disableDate = disableDate.getTime();
		}
		else {
			connectionConfigsCacheModel.disableDate = Long.MIN_VALUE;
		}

		return connectionConfigsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{configId=");
		sb.append(getConfigId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", installationId=");
		sb.append(getInstallationId());
		sb.append(", companyCode=");
		sb.append(getCompanyCode());
		sb.append(", productCode=");
		sb.append(getProductCode());
		sb.append(", disableDate=");
		sb.append(getDisableDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("es.davinciti.liferay.model.ConnectionConfigs");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>configId</column-name><column-value><![CDATA[");
		sb.append(getConfigId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>installationId</column-name><column-value><![CDATA[");
		sb.append(getInstallationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyCode</column-name><column-value><![CDATA[");
		sb.append(getCompanyCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productCode</column-name><column-value><![CDATA[");
		sb.append(getProductCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>disableDate</column-name><column-value><![CDATA[");
		sb.append(getDisableDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ConnectionConfigs.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ConnectionConfigs.class
		};
	private long _configId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private String _installationId;
	private String _companyCode;
	private String _productCode;
	private Date _disableDate;
	private long _columnBitmask;
	private ConnectionConfigs _escapedModel;
}